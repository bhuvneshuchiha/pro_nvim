return {
	-- "nvim-lualine/lualine.nvim",
	-- lazy = false,
	-- dependencies = { "nvim-tree/nvim-web-devicons" },
	-- config = function()
	-- 	local lualine = require("lualine")
	-- 	local lazy_status = require("lazy.status") -- to configure lazy pending updates count
	--
	-- 	local colors = {
	-- 		blue = "#65D1FF",
	-- 		green = "#3EFFDC",
	-- 		pink = "#FF007F",
	-- 		violet = "#FF61EF",
	-- 		yellow = "#FFDA7B",
	-- 		red = "#FF4A4A",
	-- 		fg = "#c3ccdc",
	-- 		--bg = "#112638", -- go back to default lualine color
	-- 		bg = "#000000",
	-- 		inactive_bg = "#2c3043",
	-- 	}
	-- 	-- Uncomment the below theme to activate the theme for lualine
	-- 	local my_lualine_theme = {
	-- 		normal = {
	-- 			a = { bg = colors.blue, fg = colors.bg, gui = "bold" },
	-- 			b = { bg = colors.bg, fg = colors.fg },
	-- 			c = { bg = colors.bg, fg = colors.fg },
	-- 		},
	-- 		insert = {
	-- 			a = { bg = colors.green, fg = colors.bg, gui = "bold" },
	-- 			b = { bg = colors.bg, fg = colors.fg },
	-- 			c = { bg = colors.bg, fg = colors.fg },
	-- 		},
	-- 		visual = {
	-- 			a = { bg = colors.violet, fg = colors.bg, gui = "bold" },
	-- 			b = { bg = colors.bg, fg = colors.fg },
	-- 			c = { bg = colors.bg, fg = colors.fg },
	-- 		},
	-- 		command = {
	-- 			a = { bg = colors.yellow, fg = colors.bg, gui = "bold" },
	-- 			b = { bg = colors.bg, fg = colors.fg },
	-- 			c = { bg = colors.bg, fg = colors.fg },
	-- 		},
	-- 		replace = {
	-- 			a = { bg = colors.red, fg = colors.bg, gui = "bold" },
	-- 			b = { bg = colors.bg, fg = colors.fg },
	-- 			c = { bg = colors.bg, fg = colors.fg },
	-- 		},
	-- 		inactive = {
	-- 			a = { bg = colors.inactive_bg, fg = colors.semilightgray, gui = "bold" },
	-- 			b = { bg = colors.inactive_bg, fg = colors.semilightgray },
	-- 			c = { bg = colors.inactive_bg, fg = colors.semilightgray },
	-- 		},
	-- 	}
	--
	-- 	-- configure lualine with modified theme
	-- 	lualine.setup({
	-- 		options = {
	-- 			theme = "tokyonight"-- this to get the fancy lualine back.
	-- 		},
	-- 		sections = {
	-- 			lualine_x = {
	-- 				{
	--            "filetype",
	-- 					-- lazy_status.updates,
	-- 					-- cond = lazy_status.has_updates,
	-- 					-- color = { fg = "#ff9e64" },
	-- 				},
	-- 				-- {
	-- 				-- uncomment below 3 lines to use noice
	-- 				--   require("noice").api.status.command.get,
	-- 				--   cond = require("noice").api.status.command.has,
	-- 				--   color = { fg = "#ff9e64" },
	-- 				-- },
	-- 				-- { "encoding" },
	-- 				-- { "fileformat" },
	-- 				-- { "filetype" },
	-- 			},
	-- 			-- lualine_a = { "FugitiveHead" },
	-- 			--
	-- 			lualine_a = {
	-- 				{ "mode", icon = "" },
	-- 				-- { "mode", icon = "" },
	-- 			},
	--
	--        lualine_b = {
	--            "branch"
	--        },
	--
	-- 			lualine_c = {
	-- 				{
	-- 					"filename",
	-- 					file_status = true, -- Displays file status (readonly status, modified status)
	-- 					newfile_status = false, -- Display new file status (new file means no write after created)
	-- 					path = 3, -- 0: Just the filename
	-- 					-- 1: Relative path
	-- 					-- 2: Absolute path
	-- 					-- 3: Absolute path, with tilde as the home directory
	-- 					-- 4: Filename and parent dir, with tilde as the home directory
	--
	-- 					shorting_target = 40, -- Shortens path to leave 40 spaces in the windows
	-- 					-- for other components. (terrible name, any suggestions?)
	-- 					symbols = {
	-- 						modified = "[+]", -- Text to show when the file is modified.
	-- 						readonly = "[-]", -- Text to show when the file is non-modifiable or readonly.
	-- 						unnamed = "[No Name]", -- Text to show for unnamed buffers.
	-- 						newfile = "[New]", -- Text to show for newly created file before first write
	-- 					},
	-- 				},
	-- 			},
	-- 		},
	-- 	})
	-- 	-- delete lualine_c if you want to go to back to original lualine
	-- 	require("lualine").hide({
	-- 		place = { "statusline", "tabline", "winbar" }, -- The segment this change applies to.
	-- 		unhide = true, -- whether to re-enable lualine again/ enable cmd to cmd_popup in noice to get cmd terminal.
	-- 	})
	-- end,
}
